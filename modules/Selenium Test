{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07073f1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install selenium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "229cd8d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install match"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c0396c0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import match"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ec8d452",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from selenium.webdriver.common.by import By\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bc3be239",
   "metadata": {},
   "outputs": [],
   "source": [
    "url=\"http://www.randhawa.us/games/retailer/nyu.html\"\n",
    "driver = webdriver.Firefox()\n",
    "driver.get(url)\n",
    "loop_counter=0\n",
    "result_text=\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5f548226",
   "metadata": {},
   "outputs": [],
   "source": [
    "action=60\n",
    "try:\n",
    "    previous_price=historical_prices[-1]\n",
    "except NameError:\n",
    "    button = driver.find_element(By.ID,\"practiceButton\")\n",
    "    button.click()\n",
    "    previous_price=60\n",
    "\n",
    "action=int(action)\n",
    "if action==previous_price:\n",
    "    # Click the button to maintain price\n",
    "    button = driver.find_element(By.ID,\"maintainButton\")\n",
    "    button.click()\n",
    "elif action==56:\n",
    "    button = driver.find_element(By.ID,\"tenButton\")\n",
    "    button.click()\n",
    "elif action==48:\n",
    "    button = driver.find_element(By.ID,\"twentyButton\")\n",
    "    button.click()\n",
    "else:\n",
    "    button = driver.find_element(By.ID,\"fortyButton\")\n",
    "    button.click()\n",
    "\n",
    "# Find an element and retrieve its text\n",
    "result_element = driver.find_element(By.ID,\"result-table\")\n",
    "result_text = result_element.text\n",
    "print(result_text)\n",
    "\n",
    "#convert string to dataframe and then arrays\n",
    "stringList = result_text.split('\\n')\n",
    "stringList=stringList[1:-1]\n",
    "df=pd.DataFrame([x.split(' ') for x in stringList], columns=['Week', 'Price', 'Sales', 'Remaining_Inventory'])\n",
    "\n",
    "#datafram to arrays\n",
    "sales = df['Sales'].to_numpy()\n",
    "historical_prices = df['Price'].to_numpy()\n",
    "loop_counter+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "585307bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Week Price Sales Remaining Inventory\n",
      "1 60 80 1920\n",
      "2 60 57 1863\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "65b3e12d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ddcec074",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b27bf79c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
